diff --git i/Makefile w/Makefile
index 75109ac..652b89b 100644
--- i/Makefile
+++ w/Makefile
@@ -5,25 +5,34 @@ LDFLAGS := -lX11
 
 # FreeBSD (uncomment)
 #LDFLAGS += -L/usr/local/lib -I/usr/local/include
-# # OpenBSD (uncomment)
+# OpenBSD (uncomment)
 #LDFLAGS += -L/usr/X11R6/lib -I/usr/X11R6/include
 
+# Component source files
+COMPONENTS_DIR := components
+COMPONENTS_SRC := $(wildcard $(COMPONENTS_DIR)/*.c)
+COMPONENTS_OBJ := $(COMPONENTS_SRC:.c=.o)
+
 all: options dwmblocks
 
 options:
 	@echo dwmblocks build options:
 	@echo "CFLAGS  = ${CFLAGS}"
 	@echo "LDFLAGS = ${LDFLAGS}"
 	@echo "CC      = ${CC}"
 
-dwmblocks: dwmblocks.c blocks.def.h blocks.h
-	${CC} -o dwmblocks dwmblocks.c ${CFLAGS} ${LDFLAGS}
+# Compile component source files
+$(COMPONENTS_DIR)/%.o: $(COMPONENTS_DIR)/%.c
+	${CC} ${CFLAGS} -c $< -o $@
+
+dwmblocks: dwmblocks.c $(COMPONENTS_OBJ) config.h
+	${CC} -o dwmblocks dwmblocks.c $(COMPONENTS_OBJ) ${CFLAGS} ${LDFLAGS}
 
-blocks.h:
-	cp blocks.def.h $@
+config.h:
+	cp config.def.h $@
 
 clean:
-	rm -f *.o *.gch dwmblocks
+	rm -f *.o *.gch dwmblocks $(COMPONENTS_DIR)/*.o
 
 install: dwmblocks
 	mkdir -p ${DESTDIR}${PREFIX}/bin
diff --git i/dwmblocks.c w/dwmblocks.c
index c8f77b7..4bc3e69 100644
--- i/dwmblocks.c
+++ w/dwmblocks.c
@@ -13,123 +13,115 @@
 #define SIGPLUS			SIGRTMIN
 #define SIGMINUS		SIGRTMIN
 #endif
-#define LENGTH(X)               (sizeof(X) / sizeof (X[0]))
+#define LENGTH(X)		(sizeof(X) / sizeof (X[0]))
 #define CMDLENGTH		50
-#define MIN( a, b ) ( ( a < b) ? a : b )
-#define STATUSLENGTH (LENGTH(blocks) * CMDLENGTH + 1)
+#define MIN(a, b)		((a < b) ? a : b)
+#define STATUSLENGTH	(LENGTH(blocks) * CMDLENGTH + 1)
 
 typedef struct {
 	char* icon;
-	char* command;
+	char* (*func)(void); // Function pointer for status function
 	unsigned int interval;
 	unsigned int signal;
 } Block;
 #ifndef __OpenBSD__
 void dummysighandler(int num);
 #endif
 void sighandler(int num);
 void getcmds(int time);
 void getsigcmds(unsigned int signal);
 void setupsignals();
-void sighandler(int signum);
 int getstatus(char *str, char *last);
 void statusloop();
-void termhandler();
+void termhandler(int signum);
 void pstdout();
 #ifndef NO_X
 void setroot();
 static void (*writestatus) () = setroot;
 static int setupX();
 static Display *dpy;
 static int screen;
 static Window root;
 #else
 static void (*writestatus) () = pstdout;
 #endif
 
-
-#include "blocks.h"
+#include "config.h"
 
 static char statusbar[LENGTH(blocks)][CMDLENGTH] = {0};
 static char statusstr[2][STATUSLENGTH];
 static int statusContinue = 1;
 static int returnStatus = 0;
 
-//opens process *cmd and stores output in *output
 void getcmd(const Block *block, char *output)
 {
-	//make sure status is same until output is ready
+	if (!block->func) {
+		output[0] = '\0';
+		return;
+	}
 	char tempstatus[CMDLENGTH] = {0};
 	strcpy(tempstatus, block->icon);
-	FILE *cmdf = popen(block->command, "r");
-	if (!cmdf)
+	const char *func_output = block->func();
+	if (!func_output) {
+		output[0] = '\0';
 		return;
-	int i = strlen(block->icon);
-	fgets(tempstatus+i, CMDLENGTH-i-delimLen, cmdf);
-	i = strlen(tempstatus);
-	//if block and command output are both not empty
-	if (i != 0) {
-		//only chop off newline if one is present at the end
-		i = tempstatus[i-1] == '\n' ? i-1 : i;
-		if (delim[0] != '\0') {
-			strncpy(tempstatus+i, delim, delimLen);
-		}
-		else
-			tempstatus[i++] = '\0';
+	}
+	strncat(tempstatus, func_output, CMDLENGTH - strlen(block->icon) - delimLen);
+	int i = strlen(tempstatus);
+	if (i != 0 && delim[0] != '\0') {
+		strncpy(tempstatus + i, delim, delimLen);
+	} else {
+		tempstatus[i++] = '\0';
 	}
 	strcpy(output, tempstatus);
-	pclose(cmdf);
 }
 
 void getcmds(int time)
 {
 	const Block* current;
 	for (unsigned int i = 0; i < LENGTH(blocks); i++) {
 		current = blocks + i;
 		if ((current->interval != 0 && time % current->interval == 0) || time == -1)
-			getcmd(current,statusbar[i]);
+			getcmd(current, statusbar[i]);
 	}
 }
 
 void getsigcmds(unsigned int signal)
 {
 	const Block *current;
 	for (unsigned int i = 0; i < LENGTH(blocks); i++) {
 		current = blocks + i;
 		if (current->signal == signal)
-			getcmd(current,statusbar[i]);
+			getcmd(current, statusbar[i]);
 	}
 }
 
 void setupsignals()
 {
 #ifndef __OpenBSD__
-	    /* initialize all real time signals with dummy handler */
-    for (int i = SIGRTMIN; i <= SIGRTMAX; i++)
-        signal(i, dummysighandler);
+	for (int i = SIGRTMIN; i <= SIGRTMAX; i++)
+		signal(i, dummysighandler);
 #endif
-
 	for (unsigned int i = 0; i < LENGTH(blocks); i++) {
 		if (blocks[i].signal > 0)
-			signal(SIGMINUS+blocks[i].signal, sighandler);
+			signal(SIGMINUS + blocks[i].signal, sighandler);
 	}
-
 }
 
 int getstatus(char *str, char *last)
 {
 	strcpy(last, str);
 	str[0] = '\0';
 	for (unsigned int i = 0; i < LENGTH(blocks); i++)
 		strcat(str, statusbar[i]);
-	str[strlen(str)-strlen(delim)] = '\0';
-	return strcmp(str, last);//0 if they are the same
+	str[strlen(str) - strlen(delim)] = '\0';
+	return strcmp(str, last);
 }
 
 #ifndef NO_X
 void setroot()
 {
-	if (!getstatus(statusstr[0], statusstr[1]))//Only set root if text has changed.
+	if (!getstatus(statusstr[0], statusstr[1]))
 		return;
 	XStoreName(dpy, root, statusstr[0]);
 	XFlush(dpy);
@@ -150,65 +142,63 @@ int setupX()
 
 void pstdout()
 {
-	if (!getstatus(statusstr[0], statusstr[1]))//Only write out if text has changed.
+	if (!getstatus(statusstr[0], statusstr[1]))
 		return;
-	printf("%s\n",statusstr[0]);
+	printf("%s\n", statusstr[0]);
 	fflush(stdout);
 }
 
-
 void statusloop()
 {
 	setupsignals();
 	int i = 0;
 	getcmds(-1);
 	while (1) {
 		getcmds(i++);
 		writestatus();
 		if (!statusContinue)
 			break;
 		sleep(1.0);
 	}
 }
 
 #ifndef __OpenBSD__
-/* this signal handler should do nothing */
 void dummysighandler(int signum)
 {
-    return;
+	return;
 }
 #endif
 
 void sighandler(int signum)
 {
-	getsigcmds(signum-SIGPLUS);
+	getsigcmds(signum - SIGPLUS);
 	writestatus();
 }
 
-void termhandler()
+void termhandler(int signum)
 {
 	statusContinue = 0;
 }
 
 int main(int argc, char** argv)
 {
-	for (int i = 0; i < argc; i++) {//Handle command line arguments
-		if (!strcmp("-d",argv[i]))
+	for (int i = 0; i < argc; i++) {
+		if (!strcmp("-d", argv[i]))
 			strncpy(delim, argv[++i], delimLen);
-		else if (!strcmp("-p",argv[i]))
+		else if (!strcmp("-p", argv[i]))
 			writestatus = pstdout;
 	}
 #ifndef NO_X
 	if (!setupX())
 		return 1;
 #endif
 	delimLen = MIN(delimLen, strlen(delim));
 	delim[delimLen++] = '\0';
 	signal(SIGTERM, termhandler);
 	signal(SIGINT, termhandler);
 	statusloop();
 #ifndef NO_X
 	XCloseDisplay(dpy);
 #endif
-	return 0;
+	return returnStatus;
 }
